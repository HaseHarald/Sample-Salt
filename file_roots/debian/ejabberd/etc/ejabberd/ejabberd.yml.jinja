### ==========================================
### This file is managed by Salt. Do not edit!
### ==========================================

###
###'              ejabberd configuration file
###
###

### The parameters used in this configuration file are explained in more detail
### in the ejabberd Installation and Operation Guide.
### Please consult the Guide in case of doubts, it is included with
### your copy of ejabberd, and is also available online at
### http://www.process-one.net/en/ejabberd/docs/

### The configuration file is written in YAML.
### Refer to http://en.wikipedia.org/wiki/YAML for the brief description.
### However, ejabberd treats different literals as different types:
###
### - unquoted or single-quoted strings. They are called "atoms".
###   Example: dog, 'Jupiter', '3.14159', YELLOW
###
### - numeric literals. Example: 3, -45.0, .0
###
### - quoted or folded strings.
###   Examples of quoted string: "Lizzard", "orange".
###   Example of folded string:
###   > Art thou not Romeo,
###     and a Montague?

###.  =======
###'  LOGGING

##
## loglevel: Verbosity of log files generated by ejabberd.
## 0: No ejabberd log at all (not recommended)
## 1: Critical
## 2: Error
## 3: Warning
## 4: Info
## 5: Debug
##
loglevel: {{ salt['pillar.get']('ejabberd:loglevel', 4) }}

##
## rotation: Disable ejabberd's internal log rotation, as the Debian package
## uses logrotate(8).
log_rotate_size: {{ salt['pillar.get']('ejabberd:log_rotate_size', 0) }}
log_rotate_date: "{{ salt['pillar.get']('ejabberd:log_rotate_date', '') }}"

##
## overload protection: If you want to limit the number of messages per second
## allowed from error_logger, which is a good idea if you want to avoid a flood
## of messages when system is overloaded, you can set a limit.
## 100 is ejabberd's default.
log_rate_limit: {{ salt['pillar.get']('ejabberd:log_rate_limit', 100) }}

##
## watchdog_admins: Only useful for developers: if an ejabberd process
## consumes a lot of memory, send live notifications to these XMPP
## accounts.
##
## watchdog_admins:
##   - "bob@example.com"
{%- if salt['pillar.get']('ejabberd:watchdog_admins', False) %}
watchdog_admins:
{%-   for admin in pillar['ejabberd']['watchdog_admins'] %}
  - "{{ admin }}"
{%-   endfor %}
{%- endif %}

###.  ===============
###'  NODE PARAMETERS

##
## net_ticktime: Specifies net_kernel tick time in seconds. This options must have
## identical value on all nodes, and in most cases shouldn't be changed at all from
## default value.
##
## net_ticktime: 60

###.  ================
###'  SERVED HOSTNAMES

##
## hosts: Domains served by ejabberd.
## You can define one or several, for example:
## hosts: 
##   - "example.net"
##   - "example.com"
##   - "example.org"
##
hosts:
# ToDo: This doesn't work as expected
{%- set host_config = [] %}
{%- for host in salt['pillar.get']('ejabberd:host_configs', [ localhost ]) %}
  - "{{ host }}"
{%-   if pillar['ejabberd']['host_configs'] is defined %}
{%-     if pillar['ejabberd']['host_configs'][host] is iterable %}
{%-       set host_config = host_config + [ host ] %}
{%-     endif %}
{%-   endif %}
{%- endfor %}

##
## route_subdomains: Delegate subdomains to other XMPP servers.
## For example, if this ejabberd serves example.org and you want
## to allow communication with an XMPP server called im.example.org.
##
## route_subdomains: s2s

###.  ===============
###'  LISTENING PORTS

##
## listen: The ports ejabberd will listen on, which service each is handled
## by and what options to start it with.
##
listen:
{%- for module in salt['pillar.get']('ejabberd:listen', {}) %}
  -
    port: {{ pillar['ejabberd']['listen'][module]['port'] }}
    ip: "{{ pillar['ejabberd']['listen'][module].get('ip', '::') }}"
    module: {{ module }}
{%-   if pillar['ejabberd']['listen'][module]['transport'] is defined %}
    transport: {{ pillar['ejabberd']['listen'][module].get('transport', 'tcp') }}
{%-   endif %}
{%-   if pillar['ejabberd']['listen'][module]['cerfile'] is defined %}
    certfile: "{{ pillar['ejabberd']['listen'][module].get('certfile', '/etc/ejabberd/ejabberd.pem') }}"
{%-   endif %}
{%-   if pillar['ejabberd']['listen'][module]['dhfile'] is defined %}
    dhfile: "{{ pillar['ejabberd']['listen'][module]['dhfile'] }}"
{%-   endif %}
{%-   if pillar['ejabberd']['listen'][module]['starttls'] is defined %}
    starttls: {{ pillar['ejabberd']['listen'][module].get('starttls', 'true') }}
{%-   elif pillar['ejabberd']['listen'][module]['starttls_required'] is defined %}
    starttls_required: {{ pillar['ejabberd']['listen'][module].get('starttls_required', 'true') }}
{%-   endif %}
{%-   if pillar['ejabberd']['listen'][module]['tls'] is defined %}
    tls: {{ pillar['ejabberd']['listen'][module]['tls'] }}
{%-   endif %}
{%-   if pillar['ejabberd']['listen'][module]['tls_compression'] is defined %}
    tls_compression: {{ pillar['ejabberd']['listen'][module]['tls_compression'] }}
{%-   endif %}
{%-   if pillar['ejabberd']['listen'][module]['ptotocol_options'] is defined %}
    protocol_options:
{%-     for option in pillar['ejabberd']['listen'][module].get('ptotocol_options', [ 'no_sslv3' ]) %}
      - "{{ option }}"
{%-     endfor %}
{%-   endif %}
{%-   if pillar['ejabberd']['listen'][module]['max_fsm_queue'] is defined %}
    max_fsm_queue: {{ pillar['ejabberd']['listen'][module]['max_fsm_queue'] }}
{%-   endif %}
{%-   if pillar['ejabberd']['listen'][module]['max_stanza_size'] is defined %}
    max_stanza_size: {{ pillar['ejabberd']['listen'][module].get('max_stanza_size', 65536) }}
{%-   endif %}
{%-   if pillar['ejabberd']['listen'][module]['shaper'] is defined %}
    shaper: {{ pillar['ejabberd']['listen'][module]['shaper'] }}
{%-   endif %}
{%-   if pillar['ejabberd']['listen'][module]['access'] is defined %}
    access: {{ pillar['ejabberd']['listen'][module]['access'] }}
{%-   endif %}
{%-   if pillar['ejabberd']['listen'][module]['zlib'] is defined %}
    zlib: {{ pillar['ejabberd']['listen'][module].get('zlib', 'true') }}
{%-   endif %}
{%-   if pillar['ejabberd']['listen'][module]['resend_on_timeout'] is defined %}
    resend_on_timeout: {{ pillar['ejabberd']['listen'][module]['resend_on_timeout'] }}
{%-   endif %}
{%-   if pillar['ejabberd']['listen'][module]['request_handlers'] is defined %}
    request_handlers:
{%-     for key, value in pillar['ejabberd']['listen'][module].get('request_handlers', { '/websocket': 'ejabberd_http_ws' }).iteritems() %}
      "{{ key }}": {{ value }}
{%-     endfor %}
{%-   endif %}
{%-   if pillar['ejabberd']['listen'][module]['web_admin'] is defined %}
    web_admin: {{ pillar['ejabberd']['listen'][module]['web_admin'] }}
{%-   endif %}
{%-   if pillar['ejabberd']['listen'][module]['http_bind'] is defined %}
    http_bind: {{ pillar['ejabberd']['listen'][module]['http_bind'] }}
{%-   endif %}
{%-   if pillar['ejabberd']['listen'][module]['http_poll'] is defined %}
    http_poll: {{ pillar['ejabberd']['listen'][module]['http_poll'] }}
{%-   endif %}
{%-   if pillar['ejabberd']['listen'][module]['register'] is defined %}
    register: {{ pillar['ejabberd']['listen'][module]['register'] }}
{%-   endif %}
{%-   if pillar['ejabberd']['listen'][module]['captcha'] is defined %}
    captcha: {{ pillar['ejabberd']['listen'][module]['captcha'] }}
{%-   endif %}

{% endfor %}

## Disabling digest-md5 SASL authentication. digest-md5 requires plain-text
## password storage (see auth_password_format option).
disable_sasl_mechanisms: "{{ salt['pillar.get']('ejabberd:disable_sasl_mechanisms', 'digest-md5') }}"

###.  ==================
###'  S2S GLOBAL OPTIONS

##
## s2s_use_starttls: Enable STARTTLS + Dialback for S2S connections.
## Allowed values are: false optional required required_trusted
## You must specify a certificate file.
##
s2s_use_starttls: {{ salt['pillar.get']('ejabberd:s2s_use_starttls', 'optional') }}

##
## s2s_certfile: Specify a certificate file.
##
s2s_certfile: "{{ salt['pillar.get']('ejabberd:s2s_certfile', '/etc/ejabberd/ejabberd.pem' ) }}"

## Custom OpenSSL options
##
s2s_protocol_options:
{%- for option in salt['pillar.get']('ejabberd:s2s_protocol_options', [ 'no_sslv3' ]) %}
  - "{{ option }}"
{%- endfor %}

##
## domain_certfile: Specify a different certificate for each served hostname.
##
## host_config:
##   "example.org":
##     domain_certfile: "/path/to/example_org.pem"
##   "example.com":
##     domain_certfile: "/path/to/example_com.pem"
# ToDo: Needs rethinking! Host config can also be a nested dict.
#{#%- if host_config|length > 0 %#}
#host_config:
#{#%-   for host in host_config %#}
#  "{#{ host }#}"
#{#%-     for key, value in pillar['ejabberd']['host_configs'][host'].iteritems() %#}
#    {#{ key }#}: "{#{ value }#}"
#{#%-     endfor %#}
#
#{#%    endfor %#}
#{#%- endif %#}

##
## S2S whitelist or blacklist
##
## Default s2s policy for undefined hosts.
##
## s2s_access: s2s
s2s_access: {{ salt['pillar.get']('ejabberd:s2s_access', 'all') }}

##
## Outgoing S2S options
##
## Preferred address families (which to try first) and connect timeout
## in milliseconds.
##
## outgoing_s2s_families:
##   - ipv4
##   - ipv6
## outgoing_s2s_timeout: 10000
outgoing_s2s_families:
{%- for option in salt['pillar.get']('ejabberd:outgoing_s2s_families', [ 'ipv4','ipv6' ]) %}
  - "{{ option }}"
{%- endfor %}
outgoing_s2s_timeout: {{ salt['pillar.get']('ejabberd:outgoing_s2s_timeout', 10000) }}

###.  ==============
###'  AUTHENTICATION

##
## auth_method: Method used to authenticate the users.
## The default method is the internal.
## If you want to use a different method,
## comment this line and enable the correct ones.
##
auth_method:
{%- for method in salt['pillar.get']('ejabberd:auth_method', ['internal']) %}
  - {{ method }}
{%- endfor %}

##
## Store the plain passwords or hashed for SCRAM:
## auth_password_format: plain
auth_password_format: {{ salt['pillar.get']('ejabberd:auth_password_format', 'scram') }}
##
## Define the FQDN if ejabberd doesn't detect it:
## fqdn: "server3.example.com"
{%- if pillar['ejabberd']['fqdn'] is defined %}
fqdn: "{{ pillar['ejabberd']['fqdn'] }}"
{%- endif %}

##
## Authentication using external script
## Make sure the script is executable by ejabberd.
##
## auth_method: external
## extauth_program: "/path/to/authentication/script"
{%- if pillar['ejabberd']['extauth_program'] is defined %}
extauth_program: "{{ pillar['ejabberd']['extauth_program'] }}"
{%- endif %}

##
## Authentication using SQL
## Remember to setup a database in the next section.
##
## auth_method: sql

##
## Authentication using PAM
##
## auth_method: pam
## pam_service: "pamservicename"
{%- if pillar['ejabberd']['pam_service'] is defined %}
pam_service: "{{ pillar['ejabberd']['pam_service'] }}"
{%- endif %}

##
## Authentication using LDAP
##
## auth_method: ldap
##
## List of LDAP servers:
## ldap_servers:
##   - "localhost"
##
## Encryption of connection to LDAP servers:
## ldap_encrypt: none
## ldap_encrypt: tls
##
## Port to connect to on LDAP servers:
## ldap_port: 389
## ldap_port: 636
##
## LDAP manager:
## ldap_rootdn: "dc=example,dc=com"
##
## Password of LDAP manager:
## ldap_password: "******"
##
## Search base of LDAP directory:
## ldap_base: "dc=example,dc=com"
##
## LDAP attribute that holds user ID:
## ldap_uids:
##   - "mail": "%u@mail.example.org"
##
## LDAP filter:
## ldap_filter: "(objectClass=shadowAccount)"
{%- if pillar['ejabberd']['ldap_servers'] is defined %}
ldap_servers:
{%-   for server in pillar['ejabberd']['ldap_servers'] %}
  - "{{ server }}"
{%-   endfor %}
{%- endif %}
{%- if pillar['ejabberd']['ldap_encrypt'] is defined %}
ldap_encrypt: {{ pillar['ejabberd']['ldap_encrypt'] }}
{%- endif %}
{%- if pillar['ejabberd']['ldap_tls_verify'] is defined %}
ldap_tls_verify: {{ pillar['ejabberd']['ldap_tls_verify'] }}
{%- endif %}
{%- if pillar['ejabberd']['ldap_tls_cacertfile'] is defined %}
ldap_tls_cacertfile: "{{ pillar['ejabberd']['ldap_tls_cacertfile'] }}"
{%- endif %}
{%- if pillar['ejabberd']['ldap_tls_depth'] is defined %}
ldap_tls_depth: {{ pillar['ejabberd']['ldap_tls_depth'] }}
{%- endif %}
{%- if pillar['ejabberd']['ldap_port'] is defined %}
ldap_port: {{ pillar['ejabberd']['ldap_port'] }}
{%- endif %}
{%- if pillar['ejabberd']['ldap_rootdn'] is defined %}
ldap_rootdn: "{{ pillar['ejabberd']['ldap_rootdn'] }}"
{%- endif %}
{%- if pillar['ejabberd']['ldap_password'] is defined %}
ldap_password: "{{ pillar['ejabberd']['ldap_password'] }}"
{%- endif %}
{%- if pillar['ejabberd']['ldap_base'] is defined %}
ldap_base: "{{ pillar['ejabberd']['ldap_base'] }}"
{%- endif %}
{%- if pillar['ejabberd']['ldap_uids'] is defined %}
ldap_uids:
{%-   for key, value in pillar['ejabberd']['ldap_uids'].iteritems() %}
  - "{{ key }}": "{{ value }}"
{%-   endfor %}
{%- endif %}
{%- if pillar['ejabberd']['ldap_filter'] is defined %}
ldap_filter: "{{ pillar['ejabberd']['ldap_filter'] }}"
{%- endif %}
{%- if pillar['ejabberd']['ldap_dn_filter'] is defined %}
ldap_dn_filter:
{%-   for key, value in pillar['ejabberd']['ldap_dn_filter'].iteritems() %}
  "{{ key }}": {{ value }}
{%-   endfor %}
{%- endif %}

##
## Anonymous login support:
##   auth_method: anonymous
##   anonymous_protocol: sasl_anon | login_anon | both
##   allow_multiple_connections: true | false
##
## host_config:
##   "public.example.org":
##     auth_method: anonymous
##     allow_multiple_connections: false
##     anonymous_protocol: sasl_anon
##
## To use both anonymous and internal authentication:
##
## host_config:
##   "public.example.org":
##     auth_method:
##       - internal
##       - anonymous
{%- if pillar['ejabberd']['anonymous_protocol'] is defined %}
anonymous_protocol: {{ pillar['ejabberd']['anonymous_protocol'] }}
{%- endif %}
{%- if pillar['ejabberd']['allow_multiple_connections'] is defined %}
allow_multiple_connections: {{ pillar['ejabberd']['allow_multiple_connections'] }}
{%- endif %}

###.  ==============
###'  DATABASE SETUP

## ejabberd by default uses the internal Mnesia database,
## so you do not necessarily need this section.
## This section provides configuration examples in case
## you want to use other database backends.
## Please consult the ejabberd Guide for details on database creation.

##
## MySQL server:
##
## sql_type: mysql
## sql_server: "server"
## sql_database: "database"
## sql_username: "username"
## sql_password: "password"
##
## If you want to specify the port:
## sql_port: 1234

##
## PostgreSQL server:
##
## sql_type: pgsql
## sql_server: "server"
## sql_database: "database"
## sql_username: "username"
## sql_password: "password"
##
## If you want to specify the port:
## sql_port: 1234
##
## If you use PostgreSQL, have a large database, and need a
## faster but inexact replacement for "select count(*) from users"
##
## pgsql_users_number_estimate: true

##
## SQLite:
##
## sql_type: sqlite
## sql_database: "/path/to/database.db"

##
## ODBC compatible or MSSQL server:
##
## sql_type: odbc
## sql_server: "DSN=ejabberd;UID=ejabberd;PWD=ejabberd"

##
## Number of connections to open to the database for each virtual host
##
## sql_pool_size: 10

##
## Interval to make a dummy SQL request to keep the connections to the
## database alive. Specify in seconds: for example 28800 means 8 hours
##
## sql_keepalive_interval: undefined
{%- if pillar['ejabberd']['sql_type'] is defined %}
sql_type: {{ pillar['ejabberd']['sql_type'] }}
{%- endif %}
{%- if pillar['ejabberd']['sql_server'] is defined %}
sql_server: "{{ pillar['ejabberd']['sql_server'] }}"
{%- endif %}
{%- if pillar['ejabberd']['sql_database'] is defined %}
sql_database: "{{ pillar['ejabberd']['sql_database'] }}"
{%- endif %}
{%- if pillar['ejabberd']['sql_username'] is defined %}
sql_username: "{{ pillar['ejabberd']['sql_username'] }}"
{%- endif %}
{%- if pillar['ejabberd']['sql_password'] is defined %}
sql_password: "{{ pillar['ejabberd']['sql_password'] }}"
{%- endif %}
{%- if pillar['ejabberd']['sql_port'] is defined %}
sql_port: {{ pillar['ejabberd']['sql_port'] }}
{%- endif %}
{%- if pillar['ejabberd']['pgsql_users_number_estimate'] is defined %}
pgsql_users_number_estimate: {{ pillar['ejabberd']['pgsql_users_number_estimate'] }}
{%- endif %}
{%- if pillar['ejabberd']['sql_pool_size'] is defined %}
sql_pool_size: {{ pillar['ejabberd']['sql_pool_size'] }}
{%- endif %}
{%- if pillar['ejabberd']['sql_keepalive_interval'] is defined %}
sql_keepalive_interval: {{ pillar['ejabberd']['sql_keepalive_interval'] }}
{%- endif %}

###.  ===============
###'  TRAFFIC SHAPERS

shaper:
  ##
  ## The "normal" shaper limits traffic speed to 1000 B/s
  ##
  ## normal: 1000
  ##
  ## The "fast" shaper limits traffic speed to 50000 B/s
  ##
  ## fast: 50000
{%- set default_shaper = [
  'normal: 1000',
  'fast: 50000'
] %}
{%- for shaper, value in salt['pillar.get']('ejabberd:shaper', default_shaper).iteritems() %}
  {{ shaper }}: {{ value }}
{%- endfor %}

##
## This option specifies the maximum number of elements in the queue
## of the FSM. Refer to the documentation for details.
##
max_fsm_queue: {{ salt['pillar.get']('ejabberd:s2s_certfile', 1000) }}

###.   ====================
###'   ACCESS CONTROL LISTS
acl:
  ##
  ## The 'admin' ACL grants administrative privileges to XMPP accounts.
  ## You can put here as many accounts as you want.
  ##
  ## admin:
  ##   user:
  ##     - "aleksey@localhost"
  ##     - "ermine@example.org"
{%- if pillar['ejabberd']['admin_users'] is defined %}
  admin:
    user:
{%-   for user in pillar['ejabberd']['admin_users'] %}
      - "{{ user }}"
{%    endfor %}

{%- endif %}
  ##
  ## Blocked users
  ##
  ## blocked:
  ##   user:
  ##     - "baduser@example.org"
  ##     - "test"
{%- if pillar['ejabberd']['blocked_users'] is defined %}
  blocked:
    user:
{%-   for user in pillar['ejabberd']['blocked_users'] %}
      - "{{ user }}"
{%    endfor %}

{%- endif %}
  ## Local users: don't modify this.
  ##
  local: 
    user_regexp: ""

  ##
  ## More examples of ACLs
  ##
  ## jabberorg:
  ##   server:
  ##     - "jabber.org"
  ## aleksey:
  ##   user:
  ##     - "aleksey@jabber.ru"
  ## test:
  ##   user_regexp: "^test"
  ##   user_glob: "test*"

  ##
  ## Loopback network
  ##
  loopback:
    ip:
      - "127.0.0.0/8"

  ##
  ## Bad XMPP servers
  ##
  ## bad_servers:
  ##   server:
  ##     - "xmpp.zombie.org"
  ##     - "xmpp.spam.com"
{%- if pillar['ejabberd']['bad_servers'] is defined %}
  bad_servers:
    server:
{%-   for server in pillar['ejabberd']['bad_servers'] %}
      - "{{ server }}"
{%    endfor %}

{%- endif %}
##
## Define specific ACLs in a virtual host.
##
## host_config:
##   "localhost":
##     acl:
##       admin:
##         user:
##           - "bob-local@localhost"

###.  ============
###'  SHAPER RULES

shaper_rules:
  ## Maximum number of simultaneous sessions allowed for a single user:
  max_user_sessions: 10
  ## Maximum number of offline messages that users can have:
  max_user_offline_messages:
    - 5000: admin
    - 100
  ## For C2S connections, all users except admins use the "normal" shaper
  c2s_shaper:
    - none: admin
    - normal
  ## All S2S connections use the "fast" shaper
  s2s_shaper: fast

###.  ============
###'  ACCESS RULES
access_rules:
  ## This rule allows access only for local users:
  local:
    - allow: local
  ## Only non-blocked users can use c2s connections:
  c2s:
    - deny: blocked
    - allow
  ## Only admins can send announcement messages:
  announce:
    - allow: admin
  ## Only admins can use the configuration interface:
  configure: 
    - allow: admin
  ## Only accounts of the local ejabberd server can create rooms:
  muc_create: 
    - allow: local
  ## Only accounts on the local ejabberd server can create Pubsub nodes:
  pubsub_createnode: 
    - allow: local
  ## In-band registration allows registration of any possible username.
  ## To disable in-band registration, replace 'allow' with 'deny'.
  register: 
    - allow
  ## Only allow to register from localhost
  trusted_network: 
    - allow: loopback
  ## Do not establish S2S connections with bad servers
  ## s2s: 
  ##   - deny:
  ##     - ip: "XXX.XXX.XXX.XXX/32"
  ##   - deny:
  ##     - ip: "XXX.XXX.XXX.XXX/32"
  ##   - allow

## By default the frequency of account registrations from the same IP
## is limited to 1 account every 10 minutes. To disable, specify: infinity
## registration_timeout: 600
  
##
## Define specific Access Rules in a virtual host.
##
## host_config:
##   "localhost":
##     access:
##       c2s:
##         - allow: admin
##         - deny
##       register:
##         - deny

###.  ================
###'  DEFAULT LANGUAGE

##
## language: Default language used for server messages.
##
language: "en"

##
## Set a different default language in a virtual host.
##
## host_config:
##   "localhost":
##     language: "ru"

###.  =======
###'  CAPTCHA

##
## Full path to a script that generates the image.
##
## captcha_cmd: "/usr/share/ejabberd/captcha.sh"

##
## Host for the URL and port where ejabberd listens for CAPTCHA requests.
##
## captcha_host: "example.org:5280"

##
## Limit CAPTCHA calls per minute for JID/IP to avoid DoS.
##
## captcha_limit: 5

###.  =======
###'  MODULES

##
## Modules enabled in all ejabberd virtual hosts.
##
modules: 
  mod_adhoc: {}
  mod_admin_extra: {}
  mod_announce: # recommends mod_adhoc
    access: announce
  mod_blocking: {} # requires mod_privacy
  mod_caps: {}
  mod_carboncopy: {}
  mod_client_state: {}
  mod_configure: {} # requires mod_adhoc
  ##mod_delegation: {} # for xep0356
  mod_disco: {}
  mod_echo: {}
  mod_irc: {}
  mod_http_bind: {}
  ## mod_http_fileserver:
  ##   docroot: "/var/www"
  ##   accesslog: "/var/log/ejabberd/access.log"
  mod_last: {}
  mod_muc: 
    ## host: "conference.@HOST@"
    access:
      - allow
    access_admin:
      - allow: admin
    access_create: muc_create
    access_persistent: muc_create
  ## mod_muc_log: {}
  mod_muc_admin: {}
  ## mod_multicast: {}
  mod_offline: 
    access_max_user_messages: max_user_offline_messages
  mod_ping: {}
  ## mod_pres_counter:
  ##   count: 5
  ##   interval: 60
  mod_privacy: {}
  mod_private: {}
  ## mod_proxy65: {}
  mod_pubsub: 
    access_createnode: pubsub_createnode
    ## reduces resource comsumption, but XEP incompliant
    ignore_pep_from_offline: true
    ## XEP compliant, but increases resource comsumption
    ## ignore_pep_from_offline: false
    last_item_cache: false
    plugins: 
      - "flat"
      - "hometree"
      - "pep" # pep requires mod_caps
  ## mod_register:
    ##
    ## Protect In-Band account registrations with CAPTCHA.
    ##
    ##   captcha_protected: true
    ##
    ## Set the minimum informational entropy for passwords.
    ##
    ##   password_strength: 32
    ##
    ## After successful registration, the user receives
    ## a message with this subject and body.
    ##
    ##   welcome_message:
    ##     subject: "Welcome!"
    ##     body: |-
    ##       Hi.
    ##       Welcome to this XMPP server.
    ##
    ## When a user registers, send a notification to
    ## these XMPP accounts.
    ##
    ##   registration_watchers:
    ##     - "admin1@example.org"
    ##
    ## Only clients in the server machine can register accounts
    ##
    ##   ip_access: trusted_network
    ##
    ## Local c2s or remote s2s users cannot register accounts
    ##
    ##   access_from: deny
    ##   access: register
  mod_roster:
    versioning: true
  mod_shared_roster: {}
  mod_stats: {}
  mod_time: {}
  mod_vcard:
    search: false
  mod_version: {}

##
## Enable modules with custom options in a specific virtual host
##
## host_config:
##   "localhost":
##     modules:
##       mod_echo:
##         host: "mirror.localhost"

##
## Enable modules management via ejabberdctl for installation and
## uninstallation of public/private contributed modules
## (enabled by default)
##

allow_contrib_modules: true

###.
###'
### Local Variables:
### mode: yaml
### End:
### vim: set filetype=yaml tabstop=8 foldmarker=###',###. foldmethod=marker:
