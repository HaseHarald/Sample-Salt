# ==========================================
# This file is managed by Salt. Do not edit!
# ==========================================
{# Define default values here so the template below can just focus on layout #}
{%- set sitename = site.get('ServerName', id) -%}

{%- set vals = {
    'interfaces': site.get('interface', '*').split(),
    'port': site.get('port', '80'),

    'ServerName': sitename,
    'ServerAlias': site.get('ServerAlias', ''),

    'ServerAdmin': site.get('ServerAdmin', 'webmaster@{0}'.format(sitename)),

    'DirectoryIndex': site.get('DirectoryIndex'),
    'UseCanonicalName': site.get('UseCanonicalName'),
    'AllowEncodedSlashes': site.get('AllowEncodedSlashes', 'Off'),

    'LogLevel': site.get('LogLevel', 'warn'),
    'ErrorLog': site.get('ErrorLog', '{0}/{1}-error.log'.format('/var/log/apache2', sitename)),
    'LogFormat': site.get('LogFormat', '"%h %l %u %t \\\"%r\\\" %>s"'),
    'CustomLog': site.get('CustomLog', '{0}/{1}-access.log'.format('/var/log/apache2', sitename)),

    'DocumentRoot': site.get('DocumentRoot', '{0}/{1}'.format('/var/www', sitename)),
    'VirtualDocumentRoot': site.get('VirtualDocumentRoot'),

    'Timeout': site.get('Timeout'),
    'LimitRequestFields': site.get('LimitRequestFields'),

    'Directory_default': '{0}/{1}'.format('/var/www', sitename),
    'Directory': {
        'Options': '-Indexes +FollowSymLinks',
        'Require': 'all granted',
        'AllowOverride': 'None',
    },
    'Location': {
        'Order': 'allow,deny',
        'Allow': 'from all',
        'Require': 'all granted',
    },
} -%}

<VirtualHost {% for intf in vals.interfaces %} {{intf}}:{{ vals.port }}{% endfor -%}>
    # The ServerName directive sets the request scheme, hostname and port that
    # the server uses to identify itself. This is used when creating
    # redirection URLs. In the context of virtual hosts, the ServerName
    # specifies what hostname must appear in the request's Host: header to
    # match this virtual host. For the default virtual host this
    # value is not decisive as it is used as a last resort host regardless.
    # However, you must set it for any further virtual host explicitly.
    ServerName {{ vals.ServerName }}
{%- if site.get('ServerAlias') != False %}
    ServerAlias {{ vals.ServerAlias }}
{%- endif %}

{% if site.get('ServerAdmin') != False %}
    ServerAdmin {{ vals.ServerAdmin }}
{%- endif %}

{% if site.get('DirectoryIndex') %}
    DirectoryIndex {{ vals.DirectoryIndex }}
{%- endif %}
{%- if site.get('UseCanonicalName') %}
    UseCanonicalName {{ vals.UseCanonicalName }}
{%- endif %}
{%- if site.get('AllowEncodedSlashes') != False %}
    AllowEncodedSlashes {{ vals.AllowEncodedSlashes }}
{%- endif %}

    # Available loglevels: trace8, ..., trace1, debug, info, notice, warn,
    # error, crit, alert, emerg.
    # It is also possible to configure the loglevel for particular
    # modules, e.g.
    #LogLevel info ssl:warn
{%- if site.get('LogLevel') != False %}
    LogLevel {{ vals.LogLevel }}
{%- endif %}
{%- if site.get('ErrorLog') != False %}
    ErrorLog {{ vals.ErrorLog }}
{%- endif %}
{%- if site.get('LogFormat') != False %}
    LogFormat {{ vals.LogFormat }}
{%- endif %}
{%- if site.get('CustomLog') != False %}
    CustomLog {{ vals.CustomLog }}  {{ vals.LogFormat }}
{%- endif %}

{% if site.get('DocumentRoot') != False %}
    DocumentRoot {{ vals.DocumentRoot }}
{%- endif %}
{%- if site.get('VirtualDocumentRoot') %}
    VirtualDocumentRoot {{ vals.VirtualDocumentRoot }}
{%- endif %}

{% if site.get('Timeout') != False and site.get('Timeout') != None %}
    Timeout {{ vals.Timeout }}
{%- endif %}
{%- if site.get('LimitRequestFields') %}
    LimitRequestFields {{ vals.LimitRequestFields }}
{%- endif %}

{% if site.get('SSLCertificateFile') %}
    #   SSL Engine Switch:
    #   Enable/Disable SSL for this virtual host.
    SSLEngine on
        
    #   A self-signed (snakeoil) certificate can be created by installing
    #   the ssl-cert package. See
    #   /usr/share/doc/apache2/README.Debian.gz for more info.
    #   If both key and certificate are stored in the same file, only the
    #   SSLCertificateFile directive is needed.
    SSLCertificateFile {{ site.SSLCertificateFile }}
  {%- if site.get('SSLCertificateKeyFile') %}
    SSLCertificateKeyFile {{ site.SSLCertificateKeyFile }}
  {%- endif %}
    
    #   Server Certificate Chain:
    #   Point SSLCertificateChainFile at a file containing the
    #   concatenation of PEM encoded CA certificates which form the
    #   certificate chain for the server certificate. Alternatively
    #   the referenced file can be the same as SSLCertificateFile
    #   when the CA certificates are directly appended to the server
    #   certificate for convinience.
    #SSLCertificateChainFile /etc/apache2/ssl.crt/server-ca.crt
  {%- if site.get('SSLCertificateChainFile') %}
    SSLCertificateChainFile {{ site.SSLCertificateChainFile}}
  {%- endif %}

    #   Certificate Authority (CA):
    #   Set the CA certificate verification path where to find CA
    #   certificates for client authentication or alternatively one
    #   huge file containing all of them (file must be PEM encoded)
    #   Note: Inside SSLCACertificatePath you need hash symlinks
    #		 to point to the certificate files. Use the provided
    #		 Makefile to update the hash symlinks after changes.
    #SSLCACertificatePath /etc/ssl/certs/
    #SSLCACertificateFile /etc/apache2/ssl.crt/ca-bundle.crt

    #   Certificate Revocation Lists (CRL):
    #   Set the CA revocation path where to find CA CRLs for client
    #   authentication or alternatively one huge file containing all
    #   of them (file must be PEM encoded)
    #   Note: Inside SSLCARevocationPath you need hash symlinks
    #		 to point to the certificate files. Use the provided
    #		 Makefile to update the hash symlinks after changes.
    #SSLCARevocationPath /etc/apache2/ssl.crl/
    #SSLCARevocationFile /etc/apache2/ssl.crl/ca-bundle.crl

    #   Client Authentication (Type):
    #   Client certificate verification type and depth.  Types are
    #   none, optional, require and optional_no_ca.  Depth is a
    #   number which specifies how deeply to verify the certificate
    #   issuer chain before deciding the certificate is not valid.
    #SSLVerifyClient require
    #SSLVerifyDepth  10

    #   SSL Engine Options:
    #   Set various options for the SSL engine.
    #   o FakeBasicAuth:
    #	 Translate the client X.509 into a Basic Authorisation.  This means that
    #	 the standard Auth/DBMAuth methods can be used for access control.  The
    #	 user name is the `one line' version of the client's X.509 certificate.
    #	 Note that no password is obtained from the user. Every entry in the user
    #	 file needs this password: `xxj31ZMTZzkVA'.
    #   o ExportCertData:
    #	 This exports two additional environment variables: SSL_CLIENT_CERT and
    #	 SSL_SERVER_CERT. These contain the PEM-encoded certificates of the
    #	 server (always existing) and the client (only existing when client
    #	 authentication is used). This can be used to import the certificates
    #	 into CGI scripts.
    #   o StdEnvVars:
    #	 This exports the standard SSL/TLS related `SSL_*' environment variables.
    #	 Per default this exportation is switched off for performance reasons,
    #	 because the extraction step is an expensive operation and is usually
    #	 useless for serving static content. So one usually enables the
    #	 exportation for CGI and SSI requests only.
    #   o OptRenegotiate:
    #	 This enables optimized SSL connection renegotiation handling when SSL
    #	 directives are used in per-directory context.
    #SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire
{%- endif %}
    
{% if site.get('Rewrite') %}
    RewriteEngine on
    {{ site.Rewrite }}
{%- endif %}

{% for loc, path in site.get('Alias', {}).items() %}
    Alias {{ loc }} {{ path }}
{%- endfor %}

{% for path, dir in site.get('Directory', {}).items() %}
  {%- set dvals = {
      'Options': dir.get('Options', vals.Directory.Options),
      'Require': dir.get('Require', vals.Directory.Require),
      'AllowOverride': dir.get('AllowOverride', vals.Directory.AllowOverride),
      'Dav': dir.get('Dav', False),
  } %}

  {%- if path == 'default' %}
    {%- set path = vals.Directory_default %}
  {%- endif %}

    <Directory "{{ path }}">
  {%- if dvals.get('Options') != False %}
        Options {{ dvals.Options }}
  {%- endif %}
  {%- if dvals.get('Require') != False %}
        Require {{dvals.Require}}
  {%- endif %}
  {%- if dvals.get('AllowOverride') != False %}
        AllowOverride {{ dvals.AllowOverride }}
  {%- endif %}
  {%- if dvals.get('Dav') != False %}
        Dav On
  {%- endif %}
        {{ dir.get('Formula_Append', '')|replace('\\n', '\n')|indent(8) }}
    </Directory>
{%- endfor %}

{% for path, loc in site.get('Location', {}).items() %}
  {%- set lvals = {
      'Require': loc.get('Require', vals.Location.Require),
      'Dav': loc.get('Dav', False),
  } %}

    <Location "{{ path }}">
  {%- if lvals.get('Require') != False %}
        Require {{lvals.Require}}
  {%- endif %}
  {%- if lvals.get('Dav') != False %}
        Dav On
  {%- endif %}
        {{ loc.get('Formula_Append', '')|replace('\\n', '\n')|indent(8) }}
    </Location>
{%- endfor %}

    # For most configuration files from conf-available/, which are
    # enabled or disabled at a global level, it is possible to
    # include a line for only one particular virtual host. For example the
    # following line enables the CGI configuration for this host only
    # after it has been globally disabled with "a2disconf".
    #Include conf-available/serve-cgi-bin.conf

    #   SSL Protocol Adjustments:
    #   The safe and default but still SSL/TLS standard compliant shutdown
    #   approach is that mod_ssl sends the close notify alert but doesn't wait for
    #   the close notify alert from client. When you need a different shutdown
    #   approach you can use one of the following variables:
    #   o ssl-unclean-shutdown:
    #	 This forces an unclean shutdown when the connection is closed, i.e. no
    #	 SSL close notify alert is send or allowed to received.  This violates
    #	 the SSL/TLS standard but is needed for some brain-dead browsers. Use
    #	 this when you receive I/O errors because of the standard approach where
    #	 mod_ssl sends the close notify alert.
    #   o ssl-accurate-shutdown:
    #	 This forces an accurate shutdown when the connection is closed, i.e. a
    #	 SSL close notify alert is send and mod_ssl waits for the close notify
    #	 alert of the client. This is 100% SSL/TLS standard compliant, but in
    #	 practice often causes hanging connections with brain-dead browsers. Use
    #	 this only for browsers where you know that their SSL implementation
    #	 works correctly.
    #   Notice: Most problems of broken clients are also related to the HTTP
    #   keep-alive facility, so you usually additionally want to disable
    #   keep-alive for those clients, too. Use variable "nokeepalive" for this.
    #   Similarly, one has to force some clients to use HTTP/1.0 to workaround
    #   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
    #   "force-response-1.0" for this.
    # BrowserMatch "MSIE [2-6]" \
    #		nokeepalive ssl-unclean-shutdown \
    #		downgrade-1.0 force-response-1.0

    {{ site.get('Formula_Append', '')|replace('\\n', '\n')|indent(4) }}
</VirtualHost>


